// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  // For NextAuth compatibility
  emailVerified DateTime?
  timezone  String   @default("America/Denver")
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  dayWindowStartHour   Int     @default(8)
  dayWindowEndHour     Int     @default(18)
  defaultDurationMinutes Int   @default(30)
  googleSyncEnabled    Boolean @default(false)

  tasks    Task[]
  projects Project[]
  courses  Course[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  // For NextAuth provider compatibility (e.g., Google)
  refresh_token_expires_in Int?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id     String  @id @default(cuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String
  title  String
  term   String?
  color  String?

  tasks Task[]
}

model Project {
  id          String  @id @default(cuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String?

  tasks Task[]
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
}

model Task {
  id            String     @id @default(cuid())
  user          User?      @relation(fields: [userId], references: [id])
  userId        String?
  project       Project?   @relation(fields: [projectId], references: [id])
  projectId     String?
  course        Course?    @relation(fields: [courseId], references: [id])
  courseId      String?
  title         String
  notes         String?
  subject       String?
  status        TaskStatus @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  position      Int        @default(0)
  effortMinutes Int?
  dueAt         DateTime?
  recurrenceType RecurrenceType @default(NONE)
  recurrenceInterval Int @default(1)
  recurrenceCount Int?
  recurrenceUntil DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  events    Event[]
  reminders Reminder[]
  timeLogs  TaskTimeLog[]

  @@index([dueAt, status])
}

model Event {
  id       String   @id @default(cuid())
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String
  startAt  DateTime
  endAt    DateTime
  location String?
}

enum ReminderChannel {
  EMAIL
  PUSH
  SMS
}

model Reminder {
  id        String          @id @default(cuid())
  task      Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  channel   ReminderChannel
  offsetMin Int             @default(30)
}

model TaskTimeLog {
  id        String   @id @default(cuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  startedAt DateTime
  endedAt   DateTime?

  @@index([taskId])
}
