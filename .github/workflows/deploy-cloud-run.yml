name: Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Required so GitHub can mint an OIDC token for WIF
permissions:
  contents: read
  id-token: write

env:
  REGION: ${{ vars.GCP_REGION }}                     # e.g., us-central1
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}             # e.g., student-scheduler-469918
  REPOSITORY: ${{ vars.AR_REPOSITORY }}              # e.g., web-containers (Artifact Registry repo)
  SERVICE_NAME: ${{ vars.CLOUD_RUN_SERVICE }}        # e.g., student-task-scheduler
  IMAGE_NAME: student-task-scheduler
  INSTANCE_CONNECTION_NAME: ${{ vars.INSTANCE_CONNECTION_NAME }}  # e.g., project:region:instance

  # App secrets
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_NAME: ${{ secrets.DB_NAME }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  # Optional cache:
  REDIS_URL: ${{ secrets.REDIS_URL }}
  REDIS_TOKEN: ${{ secrets.REDIS_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- GITHUB -> GOOGLE AUTH (JSON key) ----
      - name: Setup gcloud + Auth
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 474.0.0"
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Enable Required APIs
        run: |
          gcloud services enable \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            iamcredentials.googleapis.com \
            iam.googleapis.com \
            sqladmin.googleapis.com

      - name: Set gcloud defaults
        run: |
          gcloud config set project "${PROJECT_ID}"
          gcloud config set run/region "${REGION}"

      - name: Ensure Artifact Registry repository
        run: |
          set -e
          if ! gcloud artifacts repositories describe "${REPOSITORY}" --location="${REGION}" >/dev/null 2>&1; then
            echo "Creating Artifact Registry repository: ${REPOSITORY} in ${REGION}"
            gcloud artifacts repositories create "${REPOSITORY}" \
              --repository-format=docker \
              --location="${REGION}" \
              --description="Docker images for Cloud Run"
          else
            echo "Artifact Registry repository ${REPOSITORY} already exists"
          fi

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker "${REGION}-docker.pkg.dev" -q

      - name: Build & Push Image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          AR_PATH="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}"
          echo "Building ${AR_PATH}"
          docker build -t "${AR_PATH}" .
          docker push "${AR_PATH}"
          echo "AR_PATH=${AR_PATH}" >> $GITHUB_ENV

      # First deploy WITHOUT NEXTAUTH_URL to obtain service URL
      - name: First Deploy (bootstrap URL)
        run: |
          DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}?host=/cloudsql/${INSTANCE_CONNECTION_NAME}&sslmode=disable"
          ENV_VARS="NEXTAUTH_SECRET=${NEXTAUTH_SECRET},GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID},GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET},DATABASE_URL=${DATABASE_URL}"

          if [ -n "${REDIS_URL}" ] && [ -n "${REDIS_TOKEN}" ]; then
            ENV_VARS="${ENV_VARS},REDIS_URL=${REDIS_URL},REDIS_TOKEN=${REDIS_TOKEN}"
          fi

          gcloud run deploy "${SERVICE_NAME}" \
            --image "${AR_PATH}" \
            --allow-unauthenticated \
            --port 8080 \
            --add-cloudsql-instances "${INSTANCE_CONNECTION_NAME}" \
            --set-env-vars "${ENV_VARS}"

      - name: Fetch Cloud Run URL
        id: url
        run: |
          URL=$(gcloud run services describe "${SERVICE_NAME}" --format='value(status.url)')
          echo "url=${URL}" >> $GITHUB_OUTPUT
          echo "Cloud Run URL: ${URL}"

      # Redeploy WITH NEXTAUTH_URL now that we know it
      - name: Second Deploy (set NEXTAUTH_URL)
        run: |
          DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}?host=/cloudsql/${INSTANCE_CONNECTION_NAME}&sslmode=disable"
          ENV_VARS="NEXTAUTH_SECRET=${NEXTAUTH_SECRET},NEXTAUTH_URL=${{ steps.url.outputs.url }},GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID},GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET},DATABASE_URL=${DATABASE_URL}"

          if [ -n "${REDIS_URL}" ] && [ -n "${REDIS_TOKEN}" ]; then
            ENV_VARS="${ENV_VARS},REDIS_URL=${REDIS_URL},REDIS_TOKEN=${REDIS_TOKEN}"
          fi

          gcloud run deploy "${SERVICE_NAME}" \
            --image "${AR_PATH}" \
            --allow-unauthenticated \
            --port 8080 \
            --add-cloudsql-instances "${INSTANCE_CONNECTION_NAME}" \
            --set-env-vars "${ENV_VARS}"

      # Create/Update a Cloud Run Job to run Prisma migrations
      - name: Ensure Prisma Migrate Job
        run: |
          JOB_NAME="prisma-migrate"
          set -e
          DB_URL_FOR_JOB="postgresql://${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}?host=/cloudsql/${INSTANCE_CONNECTION_NAME}&sslmode=disable"

          if gcloud run jobs describe "${JOB_NAME}" >/dev/null 2>&1; then
            gcloud run jobs update "${JOB_NAME}" \
              --image "${AR_PATH}" \
              --add-cloudsql-instances "${INSTANCE_CONNECTION_NAME}" \
              --set-env-vars "DATABASE_URL=${DB_URL_FOR_JOB}" \
              --command "npx" --args "prisma","migrate","deploy"
          else
            gcloud run jobs create "${JOB_NAME}" \
              --image "${AR_PATH}" \
              --add-cloudsql-instances "${INSTANCE_CONNECTION_NAME}" \
              --set-env-vars "DATABASE_URL=${DB_URL_FOR_JOB}" \
              --command "npx" --args "prisma","migrate","deploy"
          fi

      - name: Run Prisma Migrations
        run: |
          gcloud run jobs execute prisma-migrate --wait

      - name: Show Deployed URL
        run: |
          gcloud run services describe "${SERVICE_NAME}" --format='value(status.url)'
